---
// Non serve più importare HeroLogic
---

<section class="relative w-full h-screen overflow-hidden select-none">
    <!-- Slides background -->
    <div class="absolute inset-0">
      <!-- Slide 1 -->
      <div class="hero-slide absolute inset-0 w-full h-full transition-opacity duration-700 ease-in-out" data-index="0" style="opacity: 1;">
        <!-- Desktop -->
        <div class="hidden md:block absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-industria.jpg'); background-size: cover; background-position: center;">
        </div>
        <!-- Mobile -->
        <div class="block md:hidden absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-industria-mobile.jpg'); background-size: cover; background-position: center;">
        </div>
      </div>
      <!-- Slide 2 -->
      <div class="hero-slide absolute inset-0 w-full h-full transition-opacity duration-700 ease-in-out" data-index="1" style="opacity: 0;">
        <!-- Desktop -->
        <div class="hidden md:block absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-immagine.jpg'); background-size: cover; background-position: center;">
        </div>
        <!-- Mobile -->
        <div class="block md:hidden absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-immagine-mobile.jpg'); background-size: cover; background-position: center;">
        </div>
      </div>
      <!-- Slide 3 -->
      <div class="hero-slide absolute inset-0 w-full h-full transition-opacity duration-700 ease-in-out" data-index="2" style="opacity: 0;">
        <!-- Desktop -->
        <div class="hidden md:block absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-sicurezza.jpg'); background-size: cover; background-position: center;">
        </div>
        <!-- Mobile -->
        <div class="block md:hidden absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-sicurezza-mobile.jpg'); background-size: cover; background-position: center;">
        </div>
      </div>
      <!-- Slide 4 -->
      <div class="hero-slide absolute inset-0 w-full h-full transition-opacity duration-700 ease-in-out" data-index="3" style="opacity: 0;">
        <!-- Desktop -->
        <div class="hidden md:block absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-formazione.jpg'); background-size: cover; background-position: center;">
        </div>
        <!-- Mobile -->
        <div class="block md:hidden absolute inset-0 w-full h-full"
             style="background-image: url('/images/hero-formazione-mobile.jpg'); background-size: cover; background-position: center;">
        </div>
      </div>
    </div>
  
    <div class="absolute inset-0 bg-black/50"></div>
  
    <div class="max-w-2xl md:max-w-3xl lg:max-w-4xl xl:max-w-7xl relative z-10 container mx-auto flex flex-col justify-center h-full pt-4">
      <div class="block md:flex items-center justify-center md:justify-between gap-10">
        <div class="max-w-3xl">
          <p class="text-sm md:text-base tracking-widest text-regular text-white uppercase mb-4 text-center md:text-left">
            Evolution of sales
          </p>
          <h1 class="text-4xl md:text-6xl font-telegraf lg:text-6 xl text-white text-center md:text-left pb-8 md:pb-0">
            Supporto operativo.<br />
            Nessuna complicazione
          </h1>
        </div>
  
        <button aria-label="INIZIA"
            onclick="document.getElementById('product-showcase')?.scrollIntoView({ behavior: 'smooth' })"
            class="block md:grid w-40 h-40 rounded-full bg-none hover:bg-blue-600 border focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-300 place-items-center text-white font-regular text-xl mx-auto md:mx-0 cursor-pointer">
            INIZIA
        </button>
      </div>
    </div>
  
    <!-- Progress bar - solo desktop -->
    <div class="hidden md:block relative z-10 w-full container mx-auto bottom-12 md:bottom-24 max-w-2xl md:max-w-3xl lg:max-w-4xl xl:max-w-7xl">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
        {[
          ['01', 'Industria'],
          ['02', 'Immagine'],
          ['03', 'Sicurezza'],
          ['04', 'Formazione']
        ].map(([num, label], index) => (
          <div class="flex flex-col gap-2">
            <div class={`progress-labels flex items-center justify-between text-l uppercase px-4 transition-colors duration-300 ${index === 0 ? 'text-white' : 'text-white/60'}`}>
              <span>{num}</span>
              <span>{label}</span>
            </div>
            <div class="h-px bg-white/30 relative overflow-hidden">
              <span class="bar-fill block absolute inset-0 bg-white origin-left scale-x-0"></span>
            </div>
          </div>
        ))}
      </div>
    </div>
  
    <script>
  // console.debug('Script caricato!');
      
      // Stato dello slider
      let currentIndex = 0;
      let progress = 0;
      const slideCount = 4;
      let progressAnimationId: number | null = null;
      
      // Elementi DOM
      const slides = document.querySelectorAll('.hero-slide');
      const bars = document.querySelectorAll('.bar-fill');
      const labels = document.querySelectorAll('.progress-labels');
      
  // console.debug('Slides trovate:', slides.length);
  // console.debug('Barre trovate:', bars.length);
  // console.debug('Labels trovate:', labels.length);
      
      // Funzione per aggiornare le slide
      function updateSlides() {
  // console.debug('Aggiornamento slide - currentIndex:', currentIndex);
        
        slides.forEach((slide, i) => {
          const opacity = i === currentIndex ? '1' : '0';
          (slide as HTMLElement).style.opacity = opacity;
          
          // Debug: verifica se l'immagine è caricata
          const backgroundImage = getComputedStyle(slide).backgroundImage;
    // console.debug(`Slide ${i} - opacity: ${opacity}, background: ${backgroundImage}`);
          
          // Verifica se l'elemento è visibile
          const rect = slide.getBoundingClientRect();
    // console.debug(`Slide ${i} - dimensioni: ${rect.width}x${rect.height}`);
        });
      }
      
      // Funzione per aggiornare le etichette delle progress bar
      function updateLabels() {
        labels.forEach((label, i) => {
          if (i === currentIndex) {
            (label as HTMLElement).classList.remove('text-white/60');
            (label as HTMLElement).classList.add('text-white');
          } else {
            (label as HTMLElement).classList.remove('text-white');
            (label as HTMLElement).classList.add('text-white/60');
          }
        });
      }
      
      // Funzione per aggiornare le barre di progresso
      function updateBars() {
        bars.forEach((bar, i) => {
          const transform = i === currentIndex 
            ? `scaleX(${progress / 100})` 
            : 'scaleX(0)';
          (bar as HTMLElement).style.transform = transform;
        });
      }
      
      // Funzione per animare la barra di progresso
      function animateProgress() {
        const startTime = Date.now();
        
        function animate() {
          const elapsed = Date.now() - startTime;
          progress = Math.min((elapsed / 5000) * 100, 100);
          
          updateBars();
          
          if (progress < 100) {
            progressAnimationId = requestAnimationFrame(animate);
          }
        }
        
        progressAnimationId = requestAnimationFrame(animate);
      }
      
      // Funzione per passare alla slide successiva
      function nextSlide() {
  // console.debug('Passaggio alla slide successiva');
        
        // Ferma l'animazione corrente
        if (progressAnimationId) {
          cancelAnimationFrame(progressAnimationId);
        }
        
        // Aggiorna l'indice
        currentIndex = (currentIndex + 1) % slideCount;
        progress = 0;
        
        // Aggiorna UI
        updateSlides();
        updateLabels();
        updateBars();
        
        // Riavvia l'animazione
        animateProgress();
      }
      
      // Inizializza quando il DOM è pronto
      document.addEventListener('DOMContentLoaded', () => {
  // console.debug('DOM ready - inizializzazione slider');
        
        // Aggiorna la UI iniziale
        updateSlides();
        updateLabels();
        updateBars();
        
        // Avvia l'animazione
        animateProgress();
        
        // Avvia il timer per il cambio automatico
        setInterval(nextSlide, 5000);
      });
    </script>
  </section>