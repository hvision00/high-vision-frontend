---
// Pagina di gestione delle sottocategorie - Admin
---

<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestione Sottocategorie - Admin</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    * {
      box-sizing: border-box;
    }
    
    body {
      margin: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
    }

    .admin-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    .card {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 12px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
    }

    .btn-secondary {
      background: #f8fafc;
      color: #64748b;
      border: 2px solid #e2e8f0;
      padding: 10px 20px;
      border-radius: 10px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .btn-secondary:hover {
      background: #e2e8f0;
      border-color: #cbd5e1;
    }

    .table-header {
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      font-weight: 600;
      color: #334155;
    }

    .modal-backdrop {
      background: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(4px);
    }

    .modal-content {
      background: white;
      border-radius: 20px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25);
    }

    .form-input {
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      padding: 12px 16px;
      font-size: 16px;
      transition: all 0.2s ease;
    }

    .form-input:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
  </style>
</head>
<body>
  <div class="admin-container">
    <!-- Header -->
    <div class="flex items-center justify-between mb-8">
      <div>
        <h1 class="text-4xl font-bold text-white mb-2">Gestione Sottocategorie</h1>
        <p class="text-white/80">Gestisci le sottocategorie del catalogo</p>
      </div>
      <div class="flex items-center space-x-4">
        <button onclick="openCreateModal()" class="btn-primary">
          <div class="flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            <span>Nuova Sottocategoria</span>
          </div>
        </button>
        <a href="/admin/products" class="btn-secondary">
          <div class="flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            <span>Torna ai Prodotti</span>
          </div>
        </a>
      </div>
    </div>

    <!-- Filters -->
    <div class="card mb-6">
      <div class="p-6">
        <div class="flex flex-wrap items-center gap-4">
          <div class="flex-1 min-w-64">
            <label class="block text-sm font-medium text-gray-700 mb-2">Filtra per Categoria</label>
            <select id="category-filter" class="form-input w-full">
              <option value="">Tutte le categorie</option>
            </select>
          </div>
          <div class="flex items-end">
            <button id="filter-btn" class="btn-primary">Filtra</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="card">
      <!-- Loading State -->
      <div id="loading-state" class="p-12 text-center">
        <div class="animate-spin inline-block w-8 h-8 border-4 border-current border-t-transparent text-blue-600 rounded-full mb-4"></div>
        <p class="text-gray-600">Caricamento sottocategorie...</p>
      </div>

      <!-- Error State -->
      <div id="error-state" class="hidden p-12 text-center">
        <div class="text-red-500 mb-4">
          <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">Errore nel caricamento</h3>
        <p id="error-message" class="text-gray-600 mb-6"></p>
        <button id="retry-btn" class="btn-primary">Riprova</button>
      </div>

      <!-- Table -->
      <div id="table-container" class="hidden">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="table-header">
              <tr>
                <th class="px-6 py-4 text-left">Nome</th>
                <th class="px-6 py-4 text-left">Categoria</th>
                <th class="px-6 py-4 text-left">Slug</th>
                <th class="px-6 py-4 text-left">Prodotti</th>
                <th class="px-6 py-4 text-left">Stato</th>
                <th class="px-6 py-4 text-left">Data Creazione</th>
                <th class="px-6 py-4 text-right">Azioni</th>
              </tr>
            </thead>
            <tbody id="subcategories-table-body" class="divide-y divide-gray-100">
              <!-- Rows will be populated by JavaScript -->
            </tbody>
          </table>
        </div>
      </div>

      <!-- Empty State -->
      <div id="empty-state" class="hidden p-12 text-center">
        <div class="text-gray-400 mb-4">
          <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">Nessuna sottocategoria trovata</h3>
        <p class="text-gray-600 mb-6">Inizia creando la prima sottocategoria</p>
        <button onclick="openCreateModal()" class="btn-primary">Crea Sottocategoria</button>
      </div>
    </div>
  </div>

  <!-- Create/Edit Modal -->
  <div id="subcategory-modal" class="hidden fixed inset-0 modal-backdrop flex items-center justify-center p-4 z-50">
    <div class="modal-content w-full max-w-2xl p-8">
      <div class="flex items-center justify-between mb-6">
        <h2 id="modal-title" class="text-2xl font-bold text-gray-900">Nuova Sottocategoria</h2>
        <button onclick="closeModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <form id="subcategory-form" class="space-y-6">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-2">Nome *</label>
          <input type="text" id="name" name="name" required class="form-input w-full" placeholder="Nome della sottocategoria">
        </div>

        <div>
          <label for="category_id" class="block text-sm font-medium text-gray-700 mb-2">Categoria *</label>
          <select id="category_id" name="category_id" required class="form-input w-full">
            <option value="">Seleziona categoria...</option>
          </select>
        </div>

        <div>
          <label for="slug" class="block text-sm font-medium text-gray-700 mb-2">Slug *</label>
          <input type="text" id="slug" name="slug" required class="form-input w-full" placeholder="slug-della-sottocategoria">
          <p class="text-sm text-gray-500 mt-1">Generato automaticamente dal nome, ma puoi modificarlo</p>
        </div>

        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 mb-2">Descrizione</label>
          <textarea id="description" name="description" rows="3" class="form-input w-full" placeholder="Descrizione della sottocategoria"></textarea>
        </div>

        <div>
          <label for="sort_order" class="block text-sm font-medium text-gray-700 mb-2">Ordine</label>
          <input type="number" id="sort_order" name="sort_order" class="form-input w-full" placeholder="0" min="0">
        </div>

        <div class="flex items-center justify-end space-x-4 pt-6 border-t">
          <button type="button" onclick="closeModal()" class="btn-secondary">Annulla</button>
          <button type="submit" class="btn-primary" id="submit-btn">
            <span id="submit-text">Crea Sottocategoria</span>
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="hidden fixed inset-0 modal-backdrop flex items-center justify-center p-4 z-50">
    <div class="modal-content w-full max-w-md p-8">
      <div class="text-center">
        <div class="text-red-500 mb-4">
          <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
        </div>
        <h3 class="text-xl font-semibold text-gray-900 mb-2">Conferma Eliminazione</h3>
        <p class="text-gray-600 mb-6">
          Sei sicuro di voler eliminare la sottocategoria <strong id="delete-subcategory-name"></strong>?
          <br><span class="text-sm text-red-600">Questa azione non può essere annullata.</span>
        </p>
        <div class="flex items-center justify-center space-x-4">
          <button onclick="closeDeleteModal()" class="btn-secondary">Annulla</button>
          <button id="confirm-delete-btn" class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-semibold transition-all">
            Elimina Definitivamente
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    // @ts-nocheck
    let subcategories = [];
    let categories = [];
    let currentSubcategory = null;
    let subcategoryToDelete = null;

    // Load categories for filters and form
    async function loadCategories() {
      try {
        const response = await fetch('/api/catalog/categories', {
          credentials: 'include'
        });
        
        if (!response.ok) throw new Error('Failed to load categories');
        
        const data = await response.json();
        if (data.success) {
          // Filter main categories
          const mainCategoryIds = [
            'immagine',
            'sicurezza', 
            'e6nbi7xju9xa5rnz5p9sjwgl',
            'sxrgfywyk7ac25hch1r4ppzl'
          ];
          
          categories = data.data.filter(cat => mainCategoryIds.includes(cat.id));
          populateCategoryDropdowns();
        }
      } catch (error) {
        console.error('Error loading categories:', error);
      }
    }

    function populateCategoryDropdowns() {
      const filterSelect = document.getElementById('category-filter');
      const modalSelect = document.getElementById('category_id');
      
      // Clear existing options (except first)
      filterSelect.innerHTML = '<option value="">Tutte le categorie</option>';
      modalSelect.innerHTML = '<option value="">Seleziona categoria...</option>';
      
      categories.forEach(category => {
        // Filter dropdown
        const filterOption = document.createElement('option');
        filterOption.value = category.id;
        filterOption.textContent = category.name;
        filterSelect.appendChild(filterOption);
        
        // Modal dropdown
        const modalOption = document.createElement('option');
        modalOption.value = category.id;
        modalOption.textContent = category.name;
        modalSelect.appendChild(modalOption);
      });
    }

    // Load subcategories
    async function loadSubcategories(categoryFilter = '') {
      const loadingEl = document.getElementById('loading-state');
      const errorEl = document.getElementById('error-state');
      const tableEl = document.getElementById('table-container');
      const emptyEl = document.getElementById('empty-state');

      loadingEl.classList.remove('hidden');
      errorEl.classList.add('hidden');
      tableEl.classList.add('hidden');
      emptyEl.classList.add('hidden');

      try {
        const url = categoryFilter 
          ? `/api/admin/subcategories?category=${categoryFilter}`
          : '/api/admin/subcategories';
          
        const response = await fetch(url, {
          credentials: 'include'
        });

        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);

        const data = await response.json();

        if (data.success) {
          subcategories = data.data;
          
          if (subcategories.length === 0) {
            loadingEl.classList.add('hidden');
            emptyEl.classList.remove('hidden');
          } else {
            populateTable();
            loadingEl.classList.add('hidden');
            tableEl.classList.remove('hidden');
          }
        } else {
          throw new Error('Invalid response format');
        }

      } catch (error) {
        console.error('Error loading subcategories:', error);
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        document.getElementById('error-message').textContent = errorMessage;
        loadingEl.classList.add('hidden');
        errorEl.classList.remove('hidden');
      }
    }

    function populateTable() {
      const tbody = document.getElementById('subcategories-table-body');
      tbody.innerHTML = '';

      subcategories.forEach(subcategory => {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50 transition-colors';
        
        const statusBadge = subcategory.status === 'active' 
          ? '<span class="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">Attivo</span>'
          : '<span class="px-2 py-1 bg-gray-100 text-gray-800 rounded-full text-xs font-medium">Inattivo</span>';
        
        const createdDate = new Date(subcategory.created_at).toLocaleDateString('it-IT');
        
        row.innerHTML = `
          <td class="px-6 py-4">
            <div class="font-semibold text-gray-900">${subcategory.name}</div>
            ${subcategory.description ? `<div class="text-sm text-gray-500">${subcategory.description}</div>` : ''}
          </td>
          <td class="px-6 py-4">
            <div class="text-sm text-gray-900">${subcategory.category_name || 'N/A'}</div>
          </td>
          <td class="px-6 py-4">
            <code class="text-sm bg-gray-100 px-2 py-1 rounded">${subcategory.slug}</code>
          </td>
          <td class="px-6 py-4">
            <div class="text-sm text-gray-900">${subcategory.product_count || 0} prodotti</div>
          </td>
          <td class="px-6 py-4">${statusBadge}</td>
          <td class="px-6 py-4">
            <div class="text-sm text-gray-500">${createdDate}</div>
          </td>
          <td class="px-6 py-4 text-right">
            <div class="flex items-center justify-end space-x-2">
              <button onclick="editSubcategory('${subcategory.id}')" class="text-blue-600 hover:text-blue-800 p-2 rounded-lg hover:bg-blue-50 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
              </button>
              <button onclick="deleteSubcategory('${subcategory.id}', '${subcategory.name}')" class="text-red-600 hover:text-red-800 p-2 rounded-lg hover:bg-red-50 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
              </button>
            </div>
          </td>
        `;
        
        tbody.appendChild(row);
      });
    }

    // Modal functions
    function openCreateModal() {
      currentSubcategory = null;
      document.getElementById('modal-title').textContent = 'Nuova Sottocategoria';
      document.getElementById('submit-text').textContent = 'Crea Sottocategoria';
      document.getElementById('subcategory-form').reset();
      document.getElementById('subcategory-modal').classList.remove('hidden');
    }

    function editSubcategory(id) {
      currentSubcategory = subcategories.find(s => s.id === id);
      if (!currentSubcategory) return;
      
      document.getElementById('modal-title').textContent = 'Modifica Sottocategoria';
      document.getElementById('submit-text').textContent = 'Aggiorna Sottocategoria';
      
      // Populate form
      document.getElementById('name').value = currentSubcategory.name;
      document.getElementById('category_id').value = currentSubcategory.category_id;
      document.getElementById('slug').value = currentSubcategory.slug;
      document.getElementById('description').value = currentSubcategory.description || '';
      document.getElementById('sort_order').value = currentSubcategory.sort_order || 0;
      
      document.getElementById('subcategory-modal').classList.remove('hidden');
    }

    function closeModal() {
      document.getElementById('subcategory-modal').classList.add('hidden');
      currentSubcategory = null;
    }

    function deleteSubcategory(id, name) {
      subcategoryToDelete = id;
      document.getElementById('delete-subcategory-name').textContent = name;
      document.getElementById('delete-modal').classList.remove('hidden');
    }

    function closeDeleteModal() {
      document.getElementById('delete-modal').classList.add('hidden');
      subcategoryToDelete = null;
    }

    // Generate slug from name
    function generateSlug(name) {
      return name
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim();
    }

    // Save subcategory
    async function saveSubcategory(formData) {
      try {
        const url = currentSubcategory 
          ? `/api/admin/subcategories/${currentSubcategory.id}`
          : '/api/admin/subcategories';
        const method = currentSubcategory ? 'PUT' : 'POST';

        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (result.success) {
          alert(currentSubcategory ? 'Sottocategoria aggiornata con successo!' : 'Sottocategoria creata con successo!');
          closeModal();
          loadSubcategories();
        } else {
          alert(`Errore: ${result.error || 'Errore sconosciuto'}`);
        }
      } catch (error) {
        console.error('Error saving subcategory:', error);
        alert(`Errore nel salvataggio: ${error.message}`);
      }
    }

    // Delete subcategory
    async function confirmDelete() {
      if (!subcategoryToDelete) return;

      try {
        const response = await fetch(`/api/admin/subcategories/${subcategoryToDelete}`, {
          method: 'DELETE',
          credentials: 'include'
        });

        const result = await response.json();

        if (result.success) {
          alert('Sottocategoria eliminata con successo!');
          closeDeleteModal();
          loadSubcategories();
        } else {
          alert(`Errore nell'eliminazione: ${result.error || 'Errore sconosciuto'}`);
        }
      } catch (error) {
        console.error('Error deleting subcategory:', error);
        alert(`Errore nell'eliminazione: ${error.message}`);
      }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', async () => {
      await loadCategories();
      await loadSubcategories();

      // Auto-generate slug from name
      document.getElementById('name').addEventListener('input', (e) => {
        const name = e.target.value;
        const slugInput = document.getElementById('slug');
        if (!slugInput.dataset.manuallyEdited) {
          slugInput.value = generateSlug(name);
        }
      });

      // Mark slug as manually edited
      document.getElementById('slug').addEventListener('input', () => {
        document.getElementById('slug').dataset.manuallyEdited = 'true';
      });

      // Form submission
      document.getElementById('subcategory-form').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = {
          name: document.getElementById('name').value,
          category_id: document.getElementById('category_id').value,
          slug: document.getElementById('slug').value,
          description: document.getElementById('description').value || null,
          sort_order: parseInt(document.getElementById('sort_order').value) || 0,
          status: 'active'
        };

        await saveSubcategory(formData);
      });

      // Filter button
      document.getElementById('filter-btn').addEventListener('click', () => {
        const categoryFilter = document.getElementById('category-filter').value;
        loadSubcategories(categoryFilter);
      });

      // Retry button
      document.getElementById('retry-btn').addEventListener('click', () => {
        loadSubcategories();
      });

      // Delete confirmation
      document.getElementById('confirm-delete-btn').addEventListener('click', confirmDelete);
    });

    // Make functions global for onclick handlers
    window.openCreateModal = openCreateModal;
    window.editSubcategory = editSubcategory;
    window.deleteSubcategory = deleteSubcategory;
    window.closeModal = closeModal;
    window.closeDeleteModal = closeDeleteModal;
  </script>
</body>
</html>